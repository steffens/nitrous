{"version":3,"sources":["google/google_configure.html","google/google_configure.js","google/google_client.js"],"names":[],"mappings":";;;;;;;;;AACA,6D;AACA,8H;AACA,kB;AACA,uzB;AACA,kB;AACA,8C;AACA,sD;AACA,2F;AACA,kB;AACA,8C;AACA,sD;AACA,kI;AACA,I;;;;;;;;;;;;;;;;;;;ACbA,uD;AACA,wB;AACA,gC;AACA,G;AACA,G;;AAEA,oE;AACA,U;AACA,+C;AACA,gD;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;;ACXA,Y;;AAEA,0C;AACA,4B;AACA,mF;AACA,4E;AACA,W;AACA,kF;AACA,qD;AACA,4E;AACA,gD;AACA,iB;AACA,wB;AACA,iB;AACA,G;;AAEA,gF;AACA,gB;AACA,2E;AACA,8C;AACA,W;AACA,G;;AAEA,wC;;AAEA,iD;AACA,kC;AACA,wB;AACA,iC;AACA,uC;AACA,wC;AACA,6D;;AAEA,8E;AACA,sE;AACA,sE;;AAEA,gE;;AAEA,gB;AACA,qD;AACA,+B;AACA,yC;AACA,+B;AACA,iE;AACA,oE;AACA,sC;AACA,6C;;AAEA,+E;AACA,8E;AACA,sE;AACA,8E;AACA,+D;AACA,4E;AACA,6F;AACA,G;;AAEA,qB;AACA,2B;AACA,2B;AACA,uB;AACA,yE;AACA,qC;AACA,iC;AACA,K;AACA,E","file":"/packages/google.js","sourcesContent":["\nTemplate.__checkName(\"configureLoginServiceDialogForGoogle\");\nTemplate[\"configureLoginServiceDialogForGoogle\"] = new Template(\"Template.configureLoginServiceDialogForGoogle\", (function() {\n  var view = this;\n  return [ HTML.Raw(\"<p>\\n    First, you'll need to get a Google Client ID. Follow these steps:\\n  </p>\\n  \"), HTML.OL(\"\\n    \", HTML.Raw('<li>\\n      Visit <a href=\"https://code.google.com/apis/console/\" target=\"blank\">https://code.google.com/apis/console/</a>\\n    </li>'), \"\\n    \", HTML.Raw('<li>\\n      \"Create Project\", if needed. Wait for Google to finish provisioning.\\n    </li>'), \"\\n    \", HTML.Raw('<li>\\n      On the left sidebar, go to \"APIs &amp; auth\" and, underneath, \"Consent Screen\". Make sure to enter a product name, and save.\\n    </li>'), \"\\n    \", HTML.Raw('<li>\\n      On the left sidebar, go to \"APIs &amp; auth\" and then, \"Credentials\". \"Create New Client ID\", then select \"Web application\" as the type.\\n    </li>'), \"\\n    \", HTML.LI(\"\\n     Set Authorized Javascript Origins to: \", HTML.SPAN({\n    \"class\": \"url\"\n  }, Blaze.View(\"lookup:siteUrl\", function() {\n    return Spacebars.mustache(view.lookup(\"siteUrl\"));\n  })), \"\\n    \"), \"\\n    \", HTML.LI(\"\\n      Set Authorized Redirect URI to: \", HTML.SPAN({\n    \"class\": \"url\"\n  }, Blaze.View(\"lookup:siteUrl\", function() {\n    return Spacebars.mustache(view.lookup(\"siteUrl\"));\n  }), \"_oauth/google\"), \"\\n    \"), \"\\n    \", HTML.Raw('<li>\\n      Finish by clicking \"Create Client ID\".\\n    </li>'), \"\\n  \") ];\n}));\n","Template.configureLoginServiceDialogForGoogle.helpers({\n  siteUrl: function () {\n    return Meteor.absoluteUrl();\n  }\n});\n\nTemplate.configureLoginServiceDialogForGoogle.fields = function () {\n  return [\n    {property: 'clientId', label: 'Client ID'},\n    {property: 'secret', label: 'Client secret'}\n  ];\n};\n","Google = {};\n\n// Request Google credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nGoogle.requestCredential = function (options, credentialRequestCompleteCallback) {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  } else if (!options) {\n    options = {};\n  }\n\n  var config = ServiceConfiguration.configurations.findOne({service: 'google'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(\n      new ServiceConfiguration.ConfigError());\n    return;\n  }\n\n  var credentialToken = Random.secret();\n\n  // always need this to get user id from google.\n  var requiredScope = ['profile'];\n  var scope = ['email'];\n  if (options.requestPermissions)\n    scope = options.requestPermissions;\n  scope = _.union(scope, requiredScope);\n  var flatScope = _.map(scope, encodeURIComponent).join('+');\n\n  // https://developers.google.com/accounts/docs/OAuth2WebServer#formingtheurl\n  var accessType = options.requestOfflineToken ? 'offline' : 'online';\n  var approvalPrompt = options.forceApprovalPrompt ? 'force' : 'auto';\n\n  var loginStyle = OAuth._loginStyle('google', config, options);\n\n  var loginUrl =\n        'https://accounts.google.com/o/oauth2/auth' +\n        '?response_type=code' +\n        '&client_id=' + config.clientId +\n        '&scope=' + flatScope +\n        '&redirect_uri=' + OAuth._redirectUri('google', config) +\n        '&state=' + OAuth._stateParam(loginStyle, credentialToken) +\n        '&access_type=' + accessType +\n        '&approval_prompt=' + approvalPrompt;\n\n  // Use Google's domain-specific login page if we want to restrict creation to\n  // a particular email domain. (Don't use it if restrictCreationByEmailDomain\n  // is a function.) Note that all this does is change Google's UI ---\n  // accounts-base/accounts_server.js still checks server-side that the server\n  // has the proper email address after the OAuth conversation.\n  if (typeof Accounts._options.restrictCreationByEmailDomain === 'string') {\n    loginUrl += '&hd=' + encodeURIComponent(Accounts._options.restrictCreationByEmailDomain);\n  }\n\n  OAuth.launchLogin({\n    loginService: \"google\",\n    loginStyle: loginStyle,\n    loginUrl: loginUrl,\n    credentialRequestCompleteCallback: credentialRequestCompleteCallback,\n    credentialToken: credentialToken,\n    popupOptions: { height: 600 }\n  });\n};\n"]}