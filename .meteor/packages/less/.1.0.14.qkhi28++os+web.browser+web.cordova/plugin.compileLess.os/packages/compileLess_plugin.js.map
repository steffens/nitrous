{"version":3,"sources":["compileLess/plugin/compile-less.js"],"names":[],"mappings":";;;;;;;;;;AAAA,2B;AACA,+B;AACA,+B;AACA,0C;;AAEA,oF;AACA,mD;AACA,iB;AACA,oC;AACA,uE;AACA,0E;AACA,yE;AACA,2B;AACA,qB;AACA,oE;AACA,I;;AAEA,wC;AACA,6B;AACA,uB;AACA,O;AACA,+C;AACA,+B;;AAEA,yB;AACA,sB;AACA,qC;AACA,mC;AACA,O;AACA,O;AACA,e;AACA,iE;AACA,+D;AACA,+D;AACA,uB;AACA,mD;AACA,sD;AACA,mB;AACA,0B;AACA,O;AACA,W;AACA,G;;;AAGA,kB;AACA,gD;AACA,wC;AACA,0C;AACA,G;;AAEA,6B;AACA,yC;AACA,c;AACA,wB;AACA,K;AACA,I;;AAEA,2E;AACA,kE;AACA,yD;AACA,e;AACA,G;;AAEA,yC;AACA,2D","file":"/packages/compileLess_plugin.js","sourcesContent":["var fs = Npm.require('fs');\nvar path = Npm.require('path');\nvar less = Npm.require('less');\nvar Future = Npm.require('fibers/future');\n\nPlugin.registerSourceHandler(\"less\", {archMatching: 'web'}, function (compileStep) {\n  var source = compileStep.read().toString('utf8');\n  var options = {\n    filename: compileStep.inputPath,\n    // Use fs.readFileSync to process @imports. This is the bundler, so\n    // that's not going to cause concurrency issues, and it means that (a)\n    // we don't have to use Futures and (b) errors thrown by bugs in less\n    // actually get caught.\n    syncImport: true,\n    paths: [path.dirname(compileStep._fullInputPath)] // for @import\n  };\n\n  var parser = new less.Parser(options);\n  var astFuture = new Future;\n  var sourceMap = null;\n  try {\n    parser.parse(source, astFuture.resolver());\n    var ast = astFuture.wait();\n\n    var css = ast.toCSS({\n      sourceMap: true,\n      writeSourceMap: function (sm) {\n        sourceMap = JSON.parse(sm);\n      }\n    });\n  } catch (e) {\n    // less.Parser.parse is supposed to report any errors via its\n    // callback. But sometimes, it throws them instead. This is\n    // probably a bug in less. Be prepared for either behavior.\n    compileStep.error({\n      message: \"Less compiler error: \" + e.message,\n      sourcePath: e.filename || compileStep.inputPath,\n      line: e.line,\n      column: e.column + 1\n    });\n    return;\n  }\n\n\n  if (sourceMap) {\n    sourceMap.sources = [compileStep.inputPath];\n    sourceMap.sourcesContent = [source];\n    sourceMap = JSON.stringify(sourceMap);\n  }\n\n  compileStep.addStylesheet({\n    path: compileStep.inputPath + \".css\",\n    data: css,\n    sourceMap: sourceMap\n  });\n});;\n\n// Register import.less files with the dependency watcher, without actually\n// processing them. There is a similar rule in the stylus package.\nPlugin.registerSourceHandler(\"import.less\", function () {\n  // Do nothing\n});\n\n// Backward compatibility with Meteor 0.7\nPlugin.registerSourceHandler(\"lessimport\", function () {});\n"]}