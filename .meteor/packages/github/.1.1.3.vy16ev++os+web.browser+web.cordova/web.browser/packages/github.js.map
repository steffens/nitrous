{"version":3,"sources":["github/github_configure.html","github/github_configure.js","github/github_client.js"],"names":[],"mappings":";;;;;;;;;AACA,6D;AACA,8H;AACA,kB;AACA,gW;AACA,kB;AACA,8C;AACA,sD;AACA,8F;AACA,kB;AACA,8C;AACA,sD;AACA,6C;AACA,I;;;;;;;;;;;;;;;;;;;ACbA,uD;AACA,wB;AACA,gC;AACA,G;AACA,G;;AAEA,oE;AACA,U;AACA,+C;AACA,gD;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;;ACXA,Y;;AAEA,0C;AACA,4B;AACA,mF;AACA,4E;AACA,W;AACA,kF;AACA,qD;AACA,4E;AACA,gD;AACA,iB;AACA,G;;AAEA,gF;AACA,gB;AACA,2E;AACA,8C;AACA,W;AACA,G;AACA,wC;;AAEA,4D;AACA,6D;;AAEA,gE;;AAEA,gB;AACA,gD;AACA,qC;AACA,2B;AACA,6D;AACA,+D;;AAEA,qB;AACA,2B;AACA,2B;AACA,uB;AACA,yE;AACA,qC;AACA,2C;AACA,K;AACA,E","file":"/packages/github.js","sourcesContent":["\nTemplate.__checkName(\"configureLoginServiceDialogForGithub\");\nTemplate[\"configureLoginServiceDialogForGithub\"] = new Template(\"Template.configureLoginServiceDialogForGithub\", (function() {\n  var view = this;\n  return [ HTML.Raw(\"<p>\\n    First, you'll need to get a Github Client ID. Follow these steps:\\n  </p>\\n  \"), HTML.OL(\"\\n    \", HTML.Raw('<li>\\n      Visit <a href=\"https://github.com/settings/applications/new\" target=\"blank\">https://github.com/settings/applications/new</a>\\n    </li>'), \"\\n    \", HTML.LI(\"\\n      Set Homepage URL to: \", HTML.SPAN({\n    \"class\": \"url\"\n  }, Blaze.View(\"lookup:siteUrl\", function() {\n    return Spacebars.mustache(view.lookup(\"siteUrl\"));\n  })), \"\\n    \"), \"\\n    \", HTML.LI(\"\\n      Set Authorization callback URL to: \", HTML.SPAN({\n    \"class\": \"url\"\n  }, Blaze.View(\"lookup:siteUrl\", function() {\n    return Spacebars.mustache(view.lookup(\"siteUrl\"));\n  }), \"_oauth/github\"), \"\\n    \"), \"\\n  \") ];\n}));\n","Template.configureLoginServiceDialogForGithub.helpers({\n  siteUrl: function () {\n    return Meteor.absoluteUrl();\n  }\n});\n\nTemplate.configureLoginServiceDialogForGithub.fields = function () {\n  return [\n    {property: 'clientId', label: 'Client ID'},\n    {property: 'secret', label: 'Client Secret'}\n  ];\n};\n","Github = {};\n\n// Request Github credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nGithub.requestCredential = function (options, credentialRequestCompleteCallback) {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  }\n\n  var config = ServiceConfiguration.configurations.findOne({service: 'github'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(\n      new ServiceConfiguration.ConfigError());\n    return;\n  }\n  var credentialToken = Random.secret();\n\n  var scope = (options && options.requestPermissions) || [];\n  var flatScope = _.map(scope, encodeURIComponent).join('+');\n\n  var loginStyle = OAuth._loginStyle('github', config, options);\n\n  var loginUrl =\n    'https://github.com/login/oauth/authorize' +\n    '?client_id=' + config.clientId +\n    '&scope=' + flatScope +\n    '&redirect_uri=' + OAuth._redirectUri('github', config) +\n    '&state=' + OAuth._stateParam(loginStyle, credentialToken);\n\n  OAuth.launchLogin({\n    loginService: \"github\",\n    loginStyle: loginStyle,\n    loginUrl: loginUrl,\n    credentialRequestCompleteCallback: credentialRequestCompleteCallback,\n    credentialToken: credentialToken,\n    popupOptions: {width: 900, height: 450}\n  });\n};\n"]}