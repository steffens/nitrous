{"version":3,"sources":["compileStylus/plugin/compile-stylus.js"],"names":[],"mappings":";;;;;;;;;;AAAA,2B;AACA,mC;AACA,6B;AACA,+B;AACA,0C;;AAEA,oF;AACA,qB;AACA,6C;AACA,e;AACA,2C;AACA,gE;AACA,sD;AACA,0B;;AAEA,O;AACA,uB;AACA,e;AACA,uB;AACA,oD;AACA,O;AACA,W;AACA,G;AACA,6B;AACA,yC;AACA,a;AACA,K;AACA,G;;AAEA,2E;AACA,gE;AACA,yD;AACA,e;AACA,G","file":"/packages/compileStylus_plugin.js","sourcesContent":["var fs = Npm.require('fs');\nvar stylus = Npm.require('stylus');\nvar nib = Npm.require('nib');\nvar path = Npm.require('path');\nvar Future = Npm.require('fibers/future');\n\nPlugin.registerSourceHandler(\"styl\", {archMatching: 'web'}, function (compileStep) {\n  var f = new Future;\n  stylus(compileStep.read().toString('utf8'))\n    .use(nib())\n    .set('filename', compileStep.inputPath)\n    // Include needed to allow relative @imports in stylus files\n    .include(path.dirname(compileStep._fullInputPath))\n    .render(f.resolver());\n\n  try {\n    var css = f.wait();\n  } catch (e) {\n    compileStep.error({\n      message: \"Stylus compiler error: \" + e.message\n    });\n    return;\n  }\n  compileStep.addStylesheet({\n    path: compileStep.inputPath + \".css\",\n    data: css\n  });\n});\n\n// Register import.styl files with the dependency watcher, without actually\n// processing them. There is a similar rule in the less package.\nPlugin.registerSourceHandler(\"import.styl\", function () {\n  // Do nothing\n});\n\n"]}